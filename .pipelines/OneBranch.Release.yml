#################################################################################
#                      OneBranch Pipelines - Publish                            #
# This pipeline was created by EasyStart from a sample located at:              #
#   https://aka.ms/obpipelines/easystart/samples                                #
# Documentation:  https://aka.ms/obpipelines                                    #
# Yaml Schema:    https://aka.ms/obpipelines/yaml/schema                        #
# Retail Tasks:   https://aka.ms/obpipelines/tasks                              #
# Support:        https://aka.ms/onebranchsup                                   #
#################################################################################

trigger:
  - release

parameters: # parameters are shown up in ADO UI in a build queue time
- name: 'debug'
  displayName: 'Enable debug output'
  type: boolean
  default: false
- name: 'overrideMsalCore'
  displayName: 'Publish MSAL Core'
  type: boolean
  default: false
- name: 'overrideMsalCommon'
  displayName: 'Publish MSAL Common'
  type: boolean
  default: false
- name: 'overrideMsalBrowser'
  displayName: 'Publish MSAL Browser'
  type: boolean
  default: false
- name: 'overrideMsalNode'
  displayName: 'Publish MSAL Node'
  type: boolean
  default: false
- name: 'overrideMsalReact'
  displayName: 'Publish MSAL React'
  type: boolean
  default: false
- name: 'overrideMsalAngular'
  displayName: 'Publish MSAL Angular'
  type: boolean
  default: false
- name: 'overrideMsalNodeExtensions'
  displayName: 'Publish MSAL Node Extensions'
  type: boolean
  default: false

variables:
  CDP_DEFINITION_BUILD_COUNT: $[counter('', 0)] # needed for onebranch.pipeline.version task https://aka.ms/obpipelines/versioning
  system.debug: ${{ parameters.debug }}
  ENABLE_PRS_DELAYSIGN: 0
  ROOT: $(Build.SourcesDirectory)
  REPOROOT: $(Build.SourcesDirectory)
  OUTPUTROOT: $(REPOROOT)\out
  NUGET_XMLDOC_MODE: none

  LinuxContainerImage: 'onebranch.azurecr.io/linux/ubuntu-2004:latest' # Docker image which is used to build the project https://aka.ms/obpipelines/containers

resources:
  repositories: 
    - repository: templates
      type: git
      name: OneBranch.Pipelines/GovernedTemplates
      ref: refs/heads/main

extends:
  template: v2/OneBranch.NonOfficial.CrossPlat.yml@templates # https://aka.ms/obpipelines/templates
  parameters:
    cloudvault: # https://aka.ms/obpipelines/cloudvault
      enabled: false
    globalSdl: # https://aka.ms/obpipelines/sdl
      tsa:
        enabled: false # onebranch publish all sdl results to TSA. If TSA is disabled all SDL tools will forced into 'break' build mode.
      # credscan:
      #   suppressionsFile: $(Build.SourcesDirectory)\.config\CredScanSuppressions.json
      binskim:
        break: true # always break the build on binskim issues. You can disable it by setting to 'false'
      policheck:
        break: true # always break the build on policheck issues. You can disable it by setting to 'false'
      # suppression:
      #   suppressionFile: $(Build.SourcesDirectory)\.gdn\global.gdnsuppress

    stages:
    - stage: pre_release
      displayName: Pre-Publish
      jobs:
        - job: filter
          pool:
            type: linux
          variables:
            repoName: 'msal-javascript-internal'
            ob_outputDirectory: '$(REPOROOT)/' # this directory is uploaded to pipeline artifacts, reddog and cloudvault. More info at https://aka.ms/obpipelines/artifacts
            ob_sdl_binskim_break: true # https://aka.ms/obpipelines/sdl
          steps:
          - task: ShellScript@2
            inputs:
              scriptPath: "release-scripts/prepublish.sh"
            name: filter
    # PUBLISH MSAL Core
    - stage: publish
      dependsOn: pre_release
      displayName: 'Publish Packages'
      variables:
        publishMsalCore: $[ stageDependencies.pre_release.filter.outputs['filter.publishMsalCore'] ]
        publishMsalCommon: $[ stageDependencies.pre_release.filter.outputs['filter.publishMsalCommon'] ]
        publishMsalBrowser: $[ stageDependencies.pre_release.filter.outputs['filter.publishMsalBrowser'] ]
        publishMsalReact: $[ stageDependencies.pre_release.filter.outputs['filter.publishMsalReact'] ]
        publishMsalAngular: $[ stageDependencies.pre_release.filter.outputs['filter.publishMsalAngular'] ]
        publishMsalNode: $[ stageDependencies.pre_release.filter.outputs['filter.publishMsalNode'] ]
        publishMsalNodeExtensions: $[ stageDependencies.pre_release.filter.outputs['filter.publishMsalNodeExtensions'] ]
      jobs:
      # Release MSAL Core
        - template: .pipelines/custom-templates/publish-template.yml@self
          parameters:
            jobName: 'publish_msal_core'
            path: 'lib'
            libName: 'msal-core'
            cdn: true
            publishFlagName: 'MsalCore'
            publishOverride: ${{ parameters.overrideMsalCore }}
      # Release MSAL Common
        - template: .pipelines/custom-templates/publish-template.yml@self
          parameters:
            jobName: 'publish_msal_common'
            path: 'lib'
            libName: 'msal-common'
            cdn: false
            publishFlagName: 'MsalCommon'
            publishOverride: ${{ parameters.overrideMsalCommon }}
      # Release MSAL Browser
        - template: .pipelines/custom-templates/publish-template.yml@self
          parameters:
            jobName: 'publish_msal_browser'
            path: 'lib'
            libName: 'msal-browser'
            cdn: true
            publishFlagName: 'MsalBrowser'
            dependsOn: 'publish_msal_common'
            publishOverride: ${{ parameters.overrideMsalBrowser }}
      # Release MSAL React
        - template: .pipelines/custom-templates/publish-template.yml@self
          parameters:
            jobName: 'publish_msal_react'
            path: 'lib'
            libName: 'msal-react'
            cdn: false
            publishFlagName: 'MsalReact'
            dependsOn: 'publish_msal_browser'
            publishOverride: ${{ parameters.overrideMsalReact }}
      # Release MSAL Angular
        - template: .pipelines/custom-templates/publish-template.yml@self
          parameters:
            jobName: 'publish_msal_angular'
            path: 'lib'
            libName: 'msal-angular'
            cdn: false
            publishFlagName: 'MsalAngular'
            dependsOn: 'publish_msal_browser'
            publishOverride: ${{ parameters.overrideMsalAngular }}
      # Release MSAL Node
        - template: .pipelines/custom-templates/publish-template.yml@self
          parameters:
            jobName: 'publish_msal_node'
            path: 'lib'
            libName: 'msal-node'
            cdn: false
            publishFlagName: 'MsalNode'
            dependsOn: 'publish_msal_common'
            publishOverride: ${{ parameters.overrideMsalNode }}
        # Release MSAL Node Extensions
        - template: .pipelines/custom-templates/publish-template.yml@self
          parameters:
            jobName: 'publish_msal_node_extensions'
            path: 'extensions'
            libName: 'msal-node-extensions'
            cdn: false
            publishFlagName: 'MsalNodeExtensions'
            dependsOn: 'publish_msal_common'
            publishOverride: ${{ parameters.overrideMsalNodeExtensions }}

    - stage: post_publish
      dependsOn:
        - pre_release
        - publish
      displayName: 'Post-release'
      jobs:
        - job: updateGithubRepo
          displayName: 'Update GitHub Repository'
          pool:
            type: linux
          variables:
            repoName: 'msal-javascript-internal'
            ob_outputDirectory: '$(REPOROOT)' # this directory is uploaded to pipeline artifacts, reddog and cloudvault. More info at https://aka.ms/obpipelines/artifacts
            ob_sdl_binskim_break: true # https://aka.ms/obpipelines/sdl
            msalCoreResult: $[ stageDependencies.publish.publish_msal_core.result ]
            msalCommonResult: $[ stageDependencies.publish.publish_msal_common.result ]
            msalBrowserResult: $[ stageDependencies.publish.publish_msal_browser.result ]
            msalNodeResult: $[ stageDependencies.publish.publish_msal_node.result ]
            msalReactResult: $[ stageDependencies.publish.publish_msal_react.result ]
            msalAngularResult: $[ stageDependencies.publish.publish_msal_angular.result ]
            msalNodeExtensionsResult: $[ stageDependencies.publish.publish_msal_node_extensions.result ]
          steps:
            - task: NodeTool@0
              displayName: Install Node
              inputs:
                versionSpec: '16.x'
                checkLatest: true
            # Core Artifacts
            - task: DownloadPipelineArtifact@2
              condition: eq(variables.msalCoreResult, 'Succeeded')
              continueOnError: true
              inputs:
                source: 'current'
                artifact: 'drop_publish_publish_msal_core'
                path: $(Build.SourcesDirectory)/core-artifacts
            - task: CmdLine@2
              displayName: 'Save Core CDN SRI Hashes'
              condition: eq(variables.msalCoreResult, 'Succeeded')
              continueOnError: true
              inputs:
                script: |
                  cp core-artifacts/README.md lib/msal-core/README.md
                  cp core-artifacts/docs/cdn-usage.md lib/msal-core/docs/cdn-usage.md
            - task: CmdLine@2
              displayName: 'Remove core artifacts directory'
              condition: eq(variables.msalCoreResult, 'Succeeded')
              inputs:
                script: 'rm -rf core-artifacts'

            # Browser Artifacts
            - task: DownloadPipelineArtifact@2
              condition: eq(variables.msalBrowserResult, 'Succeeded')
              inputs:
                source: 'current'
                artifact: 'drop_publish_publish_msal_browser'
                path: $(Build.SourcesDirectory)/browser-artifacts
            - task: CmdLine@2
              displayName: 'Save Browser CDN SRI Hashes'
              condition: eq(variables.msalBrowserResult, 'Succeeded')
              inputs:
                script: |
                  echo 'BROWSER ARTIFACTS'
                  ls browser-artifacts
                  echo 'BROWSER DIRECTORY'
                  ls lib/msal-browser/
                  cp browser-artifacts/README.md lib/msal-browser/README.md
                  cp browser-artifacts/docs/cdn-usage.md lib/msal-browser/docs/cdn-usage.md
            - task: CmdLine@2
              displayName: 'Remove browser artifacts directory'
              condition: eq(variables.msalBrowserResult, 'Succeeded')
              inputs:
                script: 'rm -rf browser-artifacts'

          # Update package-locks
            - task: Npm@1
              displayName: 'Update msal-core package-lock'
              condition: eq(variables.msalCoreResult, 'Succeeded')
              inputs:
                command: 'install'
                workingDir: 'lib/msal-core'
                verbose: false
              continueOnError: true
            - task: Npm@1
              displayName: 'Update msal-common package-lock'
              condition: eq(variables.msalCommonResult, 'Succeeded')
              inputs:
                command: 'install'
                workingDir: 'lib/msal-common'
                verbose: false
            - task: Npm@1
              displayName: 'Update msal-browser package-lock'
              condition: eq(variables.msalBrowserResult, 'Succeeded')
              inputs:
                command: 'install'
                workingDir: 'lib/msal-browser'
                verbose: false
              continueOnError: true
            - task: Npm@1
              displayName: 'Update msal-node package-lock'
              condition: eq(variables.msalNodeResult, 'Succeeded')
              inputs:
                command: 'install'
                workingDir: 'lib/msal-node'
                verbose: false
              continueOnError: true
            - task: Npm@1
              displayName: 'Update msal-react package-lock'
              condition: eq(variables.msalReactResult, 'Succeeded')
              inputs:
                command: 'install'
                workingDir: 'lib/msal-react'
                verbose: false
              continueOnError: true
            - task: Npm@1
              displayName: 'Update msal-angular package-lock'
              condition: eq(variables.msalAngularResult, 'Succeeded')
              inputs:
                command: 'install'
                workingDir: 'lib/msal-angular'
                verbose: false
              continueOnError: true
            - task: Npm@1
              displayName: 'Update msal-node-extensions package-lock'
              condition: eq(variables.msalNodeExtensionsResult, 'Succeeded')
              inputs:
                command: 'install'
                workingDir: 'extensions/msal-node-extensions'
                verbose: false
              continueOnError: true
          
                # Create Pull Request from post-release-month-year to dev 
            - task: Npm@1
              displayName: Install release scripts dependencies
              condition: always()
              inputs:
                command: 'custom'
                customCommand: 'ci'
                workingDirectory: 'release-scripts/'
            - task: CmdLine@2
              displayName: 'Get Release Date'
              condition: always()
              inputs:
                script: echo "##vso[task.setvariable variable=releaseDate]$(node getReleaseDate.js)"
                workingDirectory: 'release-scripts/'
              env:
                TZ: "America/Los_Angeles"
            - task: CmdLine@2
              displayName: 'Get branch'
              inputs:
                script: echo "##vso[task.setvariable variable=branch]$(node getReleaseDate.js -branch)"
                workingDirectory: 'release-scripts/'
              env:
                TZ: "America/Los_Angeles"
            - task: AzureKeyVault@2
              inputs:
                azureSubscription: 'MSIDLABKeyVault'
                KeyVaultName: 'ADALTestInfo'
                SecretsFilter: 'MSALJSGITHUB'
                RunAsPreJob: false
            - task: CmdLine@2
              displayName: 'Commit Changes'
              inputs:
                script: |
                  echo "PR DATE: $(releaseDate)"
                  echo "PR Branch: $(branch)"
                  git config --global user.email "release@msaljs.com"
                  git config --global user.name "OneBranch release Pipeline"
                  git checkout -b post-release-$(branch)
                  git add .
                  git commit -m "$(releaseDate) Post Release"
                  git pull https://${GITHUBTOKEN}@github.com/AzureAD/microsoft-authentication-library-for-js.git post-release-$(branch)
                  git push https://${GITHUBTOKEN}@github.com/AzureAD/microsoft-authentication-library-for-js.git post-release-$(branch)
              env:
                GITHUBTOKEN: $(MSALJSGITHUB)
            - script: node pullRequest.js --titleDate=$(releaseDate) --branch=post-release-$(branch)
              displayName: "Post Release Pull Request"
              workingDirectory: 'release-scripts/'
              name: post_release_pull_request
              env:
                GITHUBTOKEN: $(MSALJSGITHUB)

