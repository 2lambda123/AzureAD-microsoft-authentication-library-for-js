# Node.js

# Build a general Node.js project with npm.
# Add steps that analyze code, save build artifacts, deploy, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/javascript
pool:
  vmImage: ubuntu-latest
stages:
  - stage: post_publish
    displayName: 'Post-release'
    jobs:
      - job: updateGithubRepo
        displayName: 'Update GitHub Repository'
        variables:
          repoName: 'msal-javascript-internal'
        steps:
          - task: NodeTool@0
            displayName: Install Node
            inputs:
              versionSpec: '16.x'
              checkLatest: true
          # Download Core Artifacts
          - task: DownloadPipelineArtifact@2
            inputs:
              buildType: 'specific'
              project: 'a7934fdd-dcde-4492-a406-7fad6ac00e17'
              definition: '1758'
              specificBuildWithTriggering: true
              buildVersionToDownload: 'latest'
              allowFailedBuilds: true
              artifactName: 'drop_publish_publish_msal_core'
              targetPath: '$(Pipeline.Workspace)/core-artifacts'
          - task: AzureKeyVault@2
            inputs:
              azureSubscription: 'MSIDLABKeyVault'
              KeyVaultName: 'ADALTestInfo'
              SecretsFilter: 'MSALJSGITHUB'
              RunAsPreJob: true
          - task: CmdLine@2
            inputs:
              script: 'ls -la $(Pipeline.Workspace)/core-artifacts'
          - task: CmdLine@2
            displayName: 'Save Core CDN SRI Hashes'
            condition: eq(variables.msalCoreResult, 'Succeeded')
            continueOnError: true
            inputs:
              script: |
                cp $(Pipeline.Workspace)/core-artifacts/README.md lib/msal-core/README.md
                cp $(Pipeline.Workspace)/core-artifacts/docs/cdn-usage.md lib/msal-core/docs/cdn-usage.md
                cp $(Pipeline.Workpsace)/core-artifacts/package.json lib/msal-core/package.json
          - task: CmdLine@2
            displayName: 'Remove core artifacts directory'
            condition: eq(variables.msalCoreResult, 'Succeeded')
            inputs:
              script: 'rm -rf $(Pipeline.Workspace)/core-artifacts'

          # # Browser Artifacts
          # - task: DownloadPipelineArtifact@2
          #   condition: eq(variables.msalBrowserResult, 'Succeeded')
          #   inputs:
          #     source: 'current'
          #     artifact: 'drop_publish_publish_msal_browser'
          #     path: $(Build.SourcesDirectory)/browser-artifacts
          # - task: CmdLine@2
          #   displayName: 'Save Browser CDN SRI Hashes'
          #   condition: eq(variables.msalBrowserResult, 'Succeeded')
          #   inputs:
          #     script: |
          #       echo 'BROWSER ARTIFACTS'
          #       ls browser-artifacts
          #       echo 'BROWSER DIRECTORY'
          #       ls lib/msal-browser/
          #       cp browser-artifacts/README.md lib/msal-browser/README.md
          #       cp browser-artifacts/docs/cdn-usage.md lib/msal-browser/docs/cdn-usage.md
          # - task: CmdLine@2
          #   displayName: 'Remove browser artifacts directory'
          #   condition: eq(variables.msalBrowserResult, 'Succeeded')
          #   inputs:
          #     script: 'rm -rf browser-artifacts'

        # Update package-locks
          - task: Npm@1
            displayName: 'Update msal-core package-lock'
            inputs:
              command: 'install'
              workingDir: 'lib/msal-core'
              verbose: false
            continueOnError: true
          # - task: Npm@1
          #   displayName: 'Update msal-common package-lock'
          #   condition: eq(variables.msalCommonResult, 'Succeeded')
          #   inputs:
          #     command: 'install'
          #     workingDir: 'lib/msal-common'
          #     verbose: false
          # - task: Npm@1
          #   displayName: 'Update msal-browser package-lock'
          #   condition: eq(variables.msalBrowserResult, 'Succeeded')
          #   inputs:
          #     command: 'install'
          #     workingDir: 'lib/msal-browser'
          #     verbose: false
          #   continueOnError: true
          # - task: Npm@1
          #   displayName: 'Update msal-node package-lock'
          #   condition: eq(variables.msalNodeResult, 'Succeeded')
          #   inputs:
          #     command: 'install'
          #     workingDir: 'lib/msal-node'
          #     verbose: false
          #   continueOnError: true
          # - task: Npm@1
          #   displayName: 'Update msal-react package-lock'
          #   condition: eq(variables.msalReactResult, 'Succeeded')
          #   inputs:
          #     command: 'install'
          #     workingDir: 'lib/msal-react'
          #     verbose: false
          #   continueOnError: true
          # - task: Npm@1
          #   displayName: 'Update msal-angular package-lock'
          #   condition: eq(variables.msalAngularResult, 'Succeeded')
          #   inputs:
          #     command: 'install'
          #     workingDir: 'lib/msal-angular'
          #     verbose: false
          #   continueOnError: true
          # - task: Npm@1
          #   displayName: 'Update msal-node-extensions package-lock'
          #   condition: eq(variables.msalNodeExtensionsResult, 'Succeeded')
          #   inputs:
          #     command: 'install'
          #     workingDir: 'extensions/msal-node-extensions'
          #     verbose: false
          #   continueOnError: true
        
              # Create Pull Request from post-release-month-year to dev 
          - task: Npm@1
            displayName: Install release scripts dependencies
            condition: always()
            inputs:
              command: 'custom'
              customCommand: 'ci'
              workingDirectory: 'release-scripts/'
          - task: CmdLine@2
            displayName: 'Get Release Date'
            condition: always()
            inputs:
              script: echo "##vso[task.setvariable variable=releaseDate]$(node getReleaseDate.js)"
              workingDirectory: 'release-scripts/'
            env:
              TZ: "America/Los_Angeles"
          - task: CmdLine@2
            displayName: 'Get branch'
            inputs:
              script: echo "##vso[task.setvariable variable=branch]$(node getReleaseDate.js -branch)"
              workingDirectory: 'release-scripts/'
            env:
              TZ: "America/Los_Angeles"
          - task: CmdLine@2
            displayName: 'Commit Changes'
            inputs:
              script: |
                echo "PR DATE: $(releaseDate)"
                echo "PR Branch: $(branch)"
                git config --global user.email "release@msaljs.com"
                git config --global user.name "Release Pipeline"
                git checkout -b post-release-$(branch)
                git add .
                git commit -m "$(releaseDate) Post Release"
                git remote add upstream https://${GITHUBTOKEN}@github.com/AzureAD/microsoft-authentication-library-for-js.git
                git push upstream post-release-$(branch)
            env:
              GITHUBTOKEN: $(MSALJSGITHUB)
          - script: node pullRequest.js --titleDate=$(releaseDate) --branch=post-release-$(branch)
            displayName: "Post Release Pull Request"
            workingDirectory: 'release-scripts/'
            name: post_release_pull_request
            env:
              GITHUBTOKEN: $(MSALJSGITHUB)